#!/bin/bash

# Script to analyze Velero backup/restore performance
# Generates detailed performance reports and recommendations

set -e

echo "üìä Velero Performance Analysis"
echo "=============================="
echo ""

# Check if backup name provided
if [ $# -eq 0 ]; then
    echo "üìã Available backups:"
    velero backup get | grep -E "(NAME|Completed)" | head -20
    echo ""
    read -p "Enter backup name to analyze: " BACKUP_NAME
else
    BACKUP_NAME=$1
fi

# Validate backup exists
if ! velero backup describe $BACKUP_NAME >/dev/null 2>&1; then
    echo "‚ùå Backup '$BACKUP_NAME' not found"
    exit 1
fi

echo "üîç Analyzing backup: $BACKUP_NAME"
echo ""

# Create analysis report file
REPORT_FILE="performance-analysis-$BACKUP_NAME-$(date +%Y%m%d-%H%M%S).md"
echo "üìÑ Generating report: $REPORT_FILE"

# Start report
cat > "$REPORT_FILE" << EOF
# Velero Performance Analysis Report

**Backup Name:** $BACKUP_NAME  
**Analysis Date:** $(date)  
**Generated By:** velero-performance-testing toolkit

## Executive Summary

EOF

# Get backup details
echo "üìä Extracting backup metrics..."
BACKUP_DETAILS=$(velero backup describe $BACKUP_NAME --details=false)

# Extract key metrics
PHASE=$(echo "$BACKUP_DETAILS" | grep "Phase:" | awk '{print $2}')
START_TIME=$(echo "$BACKUP_DETAILS" | grep "Start Time:" | cut -d' ' -f3-)
COMPLETION_TIME=$(echo "$BACKUP_DETAILS" | grep "Completion Time:" | cut -d' ' -f3-)
ITEMS_BACKED_UP=$(echo "$BACKUP_DETAILS" | grep "Items backed up:" | awk '{print $3}')
TOTAL_ITEMS=$(echo "$BACKUP_DETAILS" | grep "Total items:" | awk '{print $3}')
BACKUP_SIZE=$(echo "$BACKUP_DETAILS" | grep "Backup Size:" | awk '{print $3}')
WARNINGS=$(echo "$BACKUP_DETAILS" | grep "Warnings:" | awk '{print $2}')
ERRORS=$(echo "$BACKUP_DETAILS" | grep "Errors:" | awk '{print $2}')

# Calculate duration if both times are available
if [[ -n "$START_TIME" && -n "$COMPLETION_TIME" ]]; then
    START_EPOCH=$(date -d "$START_TIME" +%s 2>/dev/null || echo "0")
    END_EPOCH=$(date -d "$COMPLETION_TIME" +%s 2>/dev/null || echo "0")
    if [[ "$START_EPOCH" -gt 0 && "$END_EPOCH" -gt 0 ]]; then
        DURATION_SECONDS=$((END_EPOCH - START_EPOCH))
        DURATION_MINUTES=$((DURATION_SECONDS / 60))
        DURATION_HUMAN="${DURATION_MINUTES}m $((DURATION_SECONDS % 60))s"
    else
        DURATION_SECONDS=0
        DURATION_HUMAN="Unable to calculate"
    fi
else
    DURATION_SECONDS=0
    DURATION_HUMAN="Not available"
fi

# Calculate performance rate
if [[ -n "$ITEMS_BACKED_UP" && "$ITEMS_BACKED_UP" -gt 0 && "$DURATION_SECONDS" -gt 0 ]]; then
    RATE=$(( ITEMS_BACKED_UP / DURATION_SECONDS ))
else
    RATE=0
fi

# Add metrics to report
cat >> "$REPORT_FILE" << EOF
## Backup Metrics

| Metric | Value |
|--------|-------|
| **Status** | $PHASE |
| **Items Backed Up** | $ITEMS_BACKED_UP |
| **Total Items** | $TOTAL_ITEMS |
| **Backup Size** | $BACKUP_SIZE |
| **Duration** | $DURATION_HUMAN |
| **Average Rate** | $RATE objects/second |
| **Warnings** | $WARNINGS |
| **Errors** | $ERRORS |
| **Start Time** | $START_TIME |
| **Completion Time** | $COMPLETION_TIME |

EOF

# Performance assessment
echo "üìà Performing performance assessment..."

# Determine performance category
if [ "$RATE" -gt 50 ]; then
    PERFORMANCE_LEVEL="üöÄ EXCELLENT"
    PERFORMANCE_COLOR="green"
    PERFORMANCE_ASSESSMENT="Backup performance is excellent and well above expected thresholds."
elif [ "$RATE" -gt 20 ]; then
    PERFORMANCE_LEVEL="‚ö° GOOD"
    PERFORMANCE_COLOR="yellow"
    PERFORMANCE_ASSESSMENT="Backup performance is acceptable but could be optimized."
elif [ "$RATE" -gt 5 ]; then
    PERFORMANCE_LEVEL="‚ö†Ô∏è MODERATE"
    PERFORMANCE_COLOR="orange"
    PERFORMANCE_ASSESSMENT="Backup performance is below optimal levels. Investigation recommended."
else
    PERFORMANCE_LEVEL="üêå SLOW"
    PERFORMANCE_COLOR="red"
    PERFORMANCE_ASSESSMENT="Backup performance is significantly degraded. This matches the reported issue behavior."
fi

# Add performance assessment to report
cat >> "$REPORT_FILE" << EOF
## Performance Assessment

**Overall Rating:** $PERFORMANCE_LEVEL

$PERFORMANCE_ASSESSMENT

### Performance Benchmarks

| Performance Level | Rate (objects/sec) | Status |
|------------------|-------------------|---------|
| Excellent | > 50 | üöÄ Target performance |
| Good | 21-50 | ‚ö° Acceptable |
| Moderate | 6-20 | ‚ö†Ô∏è Below optimal |
| Slow | < 5 | üêå **Issue reproduction** |

**Current Performance:** $RATE objects/second ($PERFORMANCE_LEVEL)

EOF

# Resource type breakdown
echo "üîç Analyzing resource breakdown..."
cat >> "$REPORT_FILE" << EOF
## Resource Analysis

### Backup Contents
\`\`\`
EOF

# Get detailed backup contents
velero backup describe $BACKUP_NAME --details >> "$REPORT_FILE" 2>/dev/null || echo "Details not available" >> "$REPORT_FILE"

cat >> "$REPORT_FILE" << EOF
\`\`\`

EOF

# Issue correlation
echo "üéØ Correlating with known issues..."
cat >> "$REPORT_FILE" << EOF
## Issue Correlation

### Expected Behavior (from issue #9169)
- **Fast initial phase:** ~5k objects process quickly
- **Performance degradation:** Slowdown to ~3 objects/sec after initial batch
- **Resource impact:** Increased CPU (~3.5 cores) and memory (~4.5GB)
- **Timeline:** v1.11.1 (~30 min) vs v1.16.2 (~6 hours for 300k objects)

### Observed Behavior
EOF

if [ "$RATE" -le 5 ]; then
    cat >> "$REPORT_FILE" << EOF
- ‚úÖ **Issue reproduced:** Performance matches reported slowdown
- üéØ **Rate correlation:** $RATE objects/sec aligns with ~3 objects/sec issue
- üìä **Scale impact:** Performance degradation confirmed at scale
EOF
else
    cat >> "$REPORT_FILE" << EOF
- ‚ùå **Issue not reproduced:** Performance better than reported
- üìä **Rate analysis:** $RATE objects/sec exceeds reported issue levels
- ü§î **Possible factors:** Different cluster, Velero version, or configuration
EOF
fi

# Recommendations
echo "üí° Generating recommendations..."
cat >> "$REPORT_FILE" << EOF

## Recommendations

### Immediate Actions
EOF

if [ "$RATE" -le 5 ]; then
    cat >> "$REPORT_FILE" << EOF
1. ‚úÖ **Issue confirmed** - Performance matches reported degradation
2. üîß **Version testing** - Test with Velero v1.11.1 for comparison
3. üìä **Resource monitoring** - Check CPU/memory usage during backup
4. üéõÔ∏è **Configuration tuning** - Adjust client-side throttling settings
EOF
else
    cat >> "$REPORT_FILE" << EOF
1. üîç **Scale testing** - Try with larger object counts (300k+)
2. üìä **Resource monitoring** - Monitor for throttling patterns
3. üéõÔ∏è **Load simulation** - Add concurrent cluster activity
4. üîß **Environment comparison** - Compare with issue reporter's setup
EOF
fi

cat >> "$REPORT_FILE" << EOF

### Configuration Optimizations
- **Client QPS/Burst:** Adjust kubectl client rate limiting
- **Resource Requests:** Tune Velero pod resource allocation
- **Concurrent Workers:** Modify backup worker concurrency
- **API Priority:** Consider API priority and fairness settings

### Monitoring Improvements
- **Resource Usage:** Monitor CPU/memory during backups
- **API Metrics:** Track API server request latency
- **Network I/O:** Monitor backup storage throughput
- **Cluster Load:** Assess overall cluster resource utilization

### Testing Matrix
| Test Scenario | Object Count | Expected Rate | Status |
|---------------|--------------|---------------|---------|
| Small Scale | 1k-10k | > 50 obj/sec | ‚è≥ Pending |
| Medium Scale | 30k | > 20 obj/sec | ‚úÖ Completed |
| Large Scale | 300k | Monitor degradation | ‚è≥ Pending |
| Concurrent Load | 300k + activity | < 5 obj/sec | ‚è≥ Pending |

EOF

# Add footer
cat >> "$REPORT_FILE" << EOF
---
**Report Generated:** $(date)  
**Tool Version:** velero-performance-testing v1.0  
**Backup Analyzed:** $BACKUP_NAME  
**Next Steps:** Review recommendations and continue testing matrix
EOF

echo ""
echo "‚úÖ Analysis completed!"
echo ""
echo "üìä **Performance Summary:**"
echo "  Rate: $RATE objects/second"
echo "  Level: $PERFORMANCE_LEVEL"
echo "  Duration: $DURATION_HUMAN"
echo "  Items: $ITEMS_BACKED_UP"
echo ""
echo "üìÑ **Full Report:** $REPORT_FILE"
echo ""
echo "üîç **Next Steps:**"
if [ "$RATE" -le 5 ]; then
    echo "  ‚úÖ Issue reproduced! Consider testing with different Velero versions"
    echo "  üìä Monitor cluster resources during backup"
    echo "  üéõÔ∏è Try configuration optimizations"
else
    echo "  üîç Scale up testing (try 300k objects)"
    echo "  üéõÔ∏è Add concurrent cluster load"
    echo "  üìä Compare with different environments"
fi

echo ""
echo "üìã **Available Commands:**"
echo "  ./velero/backup-performance-test.sh     # Run another backup test"
echo "  ./velero/restore-performance-test.sh $BACKUP_NAME  # Test restore performance"
echo "  velero backup logs $BACKUP_NAME         # View detailed backup logs"